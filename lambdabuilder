#!/bin/bash -e

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#                                                                         #
#  Copyright (C) 2018 Simon Stürz <simon.stuerz@guh.io>                   #
#                                                                         #
#  This file is part of lambdabuilder.                                    #
#                                                                         #
#  Lambdabuilder is free software: you can redistribute it and/or modif   #
#  it under the terms of the GNU General Public License as published by   #
#  the Free Software Foundation, version 2 of the License.                #
#                                                                         #
#  Lambdabuilder is distributed in the hope that it will be useful,       #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of         #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the           #
#  GNU General Public License for more details.                           #
#                                                                         #
#  You should have received a copy of the GNU General Public License      #
#  along with lambdabuilder. If not, see <http://www.gnu.org/licenses/>.  #
#                                                                         #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #



VERSION=0.1.0

#------------------------------------------------------------------------------------------
function usage() {
  cat <<EOF
Usage: $(basename $0) [COMMANDS] [OPTIONS]

This tool should help building and deploying node based aws lambda function inside an lxd container.
Copyright © 2018 Simon Stürz <simon.stuerz@guh.io>
Version: ${VERSION}

COMMANDS:
  shell                   Log into shell from builder container
  info                    Print information about the current build environment
  clean                   Run the clean command of the build script
  stop                    Stop the builder container
  start                   Start the builder container
  delete                  Delete the container
  deploy                  Build and deploy the lambda function. (default: dev)
  test [testfile]         Run tests of your repository
  help                    Show this message
  create-image            Create the lxc build image for the aws lambda builder

OPTIONS:
  -t, --test-data [DIR]   The directory where the aws test user credentials are located
  -a, --aws-dir [DIR]     The directory where the aws configration and credentials are located
  -n, --node [VERSION]    The node version to use for building the lambda function.
                          Available versions can be found here: https://nodejs.org/download/release/
                          Default version is v8.11.3
  -p, --production        Deploy to AWS production server.
  -h, --help              Show this message
  -v, --version           Show the version of the tool
  --no-colors             Disable colorfull output

EOF
}

#------------------------------------------------------------------------------------------
# bash colors
BASH_GREEN="\e[1;32m"
BASH_ORANGE="\e[33m"
BASH_RED="\e[1;31m"
BASH_NORMAL="\e[0m"

printGreen() {
    if ${COLORS}; then
        echo -e "${BASH_GREEN}[+] AWS lambda builder: $1${BASH_NORMAL}"
    else
        echo -e "[+] AWS lambda builder: $1"
    fi
}

printOrange() {
    if ${COLORS}; then
        echo -e "${BASH_ORANGE}[-] AWS lambda builder: $1${BASH_NORMAL}"
    else
        echo -e "[-] AWS lambda builder: $1"
    fi
}

printRed() {
    if ${COLORS}; then
        echo -e "${BASH_RED}[!] AWS lambda builder: $1${BASH_NORMAL}"
    else
        echo -e "[!] AWS lambda builder: $1"
    fi
}

#------------------------------------------------------------------------------------------
waitContainerNetwork() {
    printGreen "Wait for container getting online..."
    NETWORK_UP=0
    for i in `seq 1 20`; do
        if lxc info ${CONTAINERNAME} | grep -e "eth0.*inet\b" > /dev/null 2>&1 ; then
            NETWORK_UP=1
            printGreen "Container is online"
            break
        fi
        sleep 1
    done

    if [ $NETWORK_UP -ne 1 ] ; then
        printRed "Container is not connected to the Internet."
        exit 1
    fi
}

waitDpkgAvailable() {
    printGreen "Wait for container dpkg getting available..."
    DPKG_AVAILABLE=0

    for i in `seq 1 60`
    do
        #echo "${ERROR_COLOR} /var/lib/dpkg/lock exists... Waiting for it to disappear...${NC}"
        if execContainerRoot test ! -e /var/lib/dpkg/lock; then
            DPKG_AVAILABLE=1
            printGreen "The update manager is available now."
            break
        fi
        sleep 1
    done
    if [ $DPKG_AVAILABLE -ne 1 ] ; then
        #echo "${ERROR_COLOR} /var/lib/dpkg/lock still exists after one minute. Assuming it is stale. Deleting it...${NC}"
        execContainerRoot rm /var/lib/dpkg/lock
    fi
}

#------------------------------------------------------------------------------------------
containerRunning() {
    lxc list | grep ${CONTAINERNAME} | grep RUNNING > /dev/null 2>&1
    return $?
}

#------------------------------------------------------------------------------------------
createContainer() {
    printGreen "Create lxc container ${CONTAINERNAME}"
    if lxc info ${CONTAINERNAME} > /dev/null 2>&1 ; then
        printOrange "--> Container ${CONTAINERNAME} already exists."
        startContainer
        return 0
    fi

    # FIXME: get this from jenkins server
    lxc remote --public=true --accept-certificate=true add nymea https://jenkins.nymea.io || true

    lxc init nymea:${IMAGENAME} ${CONTAINERNAME}
    lxc config set ${CONTAINERNAME} security.privileged true

    # Start container
    startContainer

    waitContainerNetwork
    #waitDpkgAvailable
    #execContainerRoot apt -y update
    #execContainerRoot apt -y upgrade
    #execContainerRoot apt -y install sudo

    # Set up user
    USERNAME_CONTAINER=`lxc exec ${CONTAINERNAME} grep ":$USERID:" /etc/passwd | cut -f 1 -d ":"`
    if [ ! -z "$USERNAME_CONTAINER" ]; then
        printGreen "Removing user in container with the same user id: $USERNAME_CONTAINER"
        lxc exec --env GROUPID=$GROUPID --env GROUPNAME=$GROUPNAME ${CONTAINERNAME} -- deluser $USERNAME_CONTAINER
        lxc exec --env GROUPID=$GROUPID --env GROUPNAME=$GROUPNAME ${CONTAINERNAME} -- userdel $USERNAME_CONTAINER
    fi

    printGreen "Create user $USERNAME in the container"
    lxc exec --env GROUPID=$GROUPID --env GROUPNAME=$GROUPNAME ${CONTAINERNAME} -- addgroup --gid $GROUPID $GROUPNAME
    lxc exec --env GROUPID=$GROUPID --env USERNAME=$USERNAME --env USERID=$USERID ${CONTAINERNAME} -- adduser --disabled-password --gecos "" --uid $USERID --gid $GROUPID $USERNAME

    execContainerRoot adduser $USERNAME sudo
    execContainerRoot passwd --delete $USERNAME

    # Mount folders
    if ! lxc config device get ${CONTAINERNAME} current_dir_mount disk 2> /dev/null ; then
        printGreen "Mounting build directory ${BUILDDIR} into container."
        lxc config device add ${CONTAINERNAME} current_dir_mount disk source=$BUILDDIR path=$BUILDDIR_MOUNT
    else
        lxc config device set ${CONTAINERNAME} current_dir_mount source $BUILDDIR
    fi

    if ! lxc config device get ${CONTAINERNAME} aws_dir_mount disk 2> /dev/null ; then
        printGreen "Mounting aws-dir ${AWS_SECRETS} into container."
        lxc config device add ${CONTAINERNAME} aws_dir_mount disk source=$AWS_SECRETS path=$AWS_SECRETS_MOUNT
    else
        lxc config device set ${CONTAINERNAME} aws_dir_mount source $AWS_SECRETS
    fi

    if ! lxc config device get ${CONTAINERNAME} test-data_dir_mount disk 2> /dev/null ; then
        printGreen "Mounting test-data ${AWS_TESTDATA} into container."
        lxc config device add ${CONTAINERNAME} test-data_dir_mount disk source=$AWS_TESTDATA path=$AWS_TESTDATA_MOUNT
    else
        lxc config device set ${CONTAINERNAME} test-data_dir_mount source $AWS_TESTDATA
    fi
}

#------------------------------------------------------------------------------------------
installNode() {
    cleanNodeLinks
    NODE_VERSION=$1
    printGreen "Set up node version ${NODE_VERSION}"
    if  execContainerRoot ls /usr/local/node-${NODE_VERSION}-linux-x64  > /dev/null 2>&1; then
        printGreen "node version ${NODE_VERSION} already installed."
        createNodeLinks
        printBuildVersions
        return 0
    fi

    printGreen "Installing node version ${NODE_VERSION}"

    # Download node
    printGreen "Download node ${NODE_VERSION} ..."
    execContainerRoot wget https://nodejs.org/download/release/${NODE_VERSION}/node-${NODE_VERSION}-linux-x64.tar.gz
    execContainerRoot ls -lh node-${NODE_VERSION}-linux-x64.tar.gz
    printGreen "Extract node-${NODE_VERSION}-linux-x64.tar.gz to /usr/local/"
    execContainerRoot tar xf node-${NODE_VERSION}-linux-x64.tar.gz -C /usr/local/
    execContainerRoot rm -v node-${NODE_VERSION}-linux-x64.tar.gz

    createNodeLinks

    # install serverless
    printGreen "Install serverless"
    execContainerRoot npm i -g serverless

    createNodeLinks
    printBuildVersions
}

#------------------------------------------------------------------------------------------
printBuildVersions() {
    echo "Node version: $(execContainerRoot node --version)"
    echo "npm version: $(execContainerRoot npm --version)"
    echo "serverless version: $(execContainerRoot serverless --version)"
    execContainerRoot aws --version
}

#------------------------------------------------------------------------------------------
# Note: this is only needed if you want to create the base
createBaseImage() {
    printGreen "Create base image for aws lambda builder:"

    CONTAINERNAME=${IMAGENAME}-base

    # Check if there is an image
    if lxc image info ${IMAGENAME} > /dev/null 2>&1; then
        printRed "There is already an image with the name ${IMAGENAME}. Please rename or delete the existing image."
        exit 1
    fi

    # Check if there is a container
    if lxc info ${CONTAINERNAME} > /dev/null 2>&1 ; then
        printRed "--> Container ${CONTAINERNAME} already exists. Please rename or delete the existing container."
        return 1
    fi

    # Get the bionic image
    printGreen "Create base container ${CONTAINERNAME}"
    lxc init ubuntu:18.04 ${CONTAINERNAME}

    startContainer
    waitContainerNetwork

    # Update
    execContainerRoot apt -y update
    execContainerRoot apt -y upgrade

    # Install packages
    execContainerRoot apt -y install python unzip sudo

    installNode "v6.14.3"
    installNode "v8.11.3"

    # install aws-cli
    printGreen "Install aws-cli"
    execContainerRoot wget https://s3.amazonaws.com/aws-cli/awscli-bundle.zip
    execContainerRoot unzip awscli-bundle.zip
    execContainerRoot ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
    execContainerRoot rm -r awscli-bundle*
    execContainerRoot aws --version

    # Clean up container
    execContainerRoot apt -y autoremove
    execContainerRoot apt -y clean

    # Create the image out of this container
    stopContainer
    printGreen "Create image ${IMAGENAME} out of the container ${CONTAINERNAME}"
    lxc publish ${CONTAINERNAME} --alias ${IMAGENAME}
    deleteContainer
    lxc image list | grep ${IMAGENAME}
}


#------------------------------------------------------------------------------------------
createNodeLinks() {
    cleanNodeLinks
    execContainerRoot ln -s /usr/local/node-${NODE_VERSION}-linux-x64 /usr/local/node
    execContainerRoot ln -s /usr/local/node/bin/node /usr/local/bin/node
    execContainerRoot ln -s /usr/local/node/bin/npm /usr/local/bin/npm
    execContainerRoot ln -s /usr/local/node/bin/serverless /usr/local/bin/serverless || true
}

#------------------------------------------------------------------------------------------
cleanNodeLinks() {
    execContainerRoot rm -v /usr/local/bin/npm > /dev/null 2>&1 || true
    execContainerRoot rm -v /usr/local/bin/node > /dev/null 2>&1 || true
    execContainerRoot rm -v /usr/local/bin/serverless > /dev/null 2>&1 || true
    execContainerRoot rm -v /usr/local/node > /dev/null 2>&1 || true
}

#------------------------------------------------------------------------------------------
deleteContainer() {
    printGreen "Delete container ${CONTAINERNAME}"
    lxc delete ${CONTAINERNAME} --force || true
}

#------------------------------------------------------------------------------------------
startContainer() {
    printGreen "Start container ${CONTAINERNAME}"
    if ! containerRunning; then
        lxc start ${CONTAINERNAME};
    else
        printOrange "--> Container ${CONTAINERNAME} already running"
    fi
}

#------------------------------------------------------------------------------------------
stopContainer() {
    printGreen "Stop container ${CONTAINERNAME}"
    lxc stop ${CONTAINERNAME} --force || true
}

#------------------------------------------------------------------------------------------
enterShell() {
    printGreen "Enter shell in container ${CONTAINERNAME}"
    lxc exec ${CONTAINERNAME} -- su --login $USERNAME
    #lxc exec ${CONTAINERNAME} bash
}

#------------------------------------------------------------------------------------------
runCleanCommand() {
    printGreen "Clean node_modules directory..."
    execContainer rm -rf node_modules/
    execContainer rm $TEST_XML_OUTPUT || true
}

#------------------------------------------------------------------------------------------
execContainerRoot() {
    command="$@"
    #printGreen "Execute command in container as root: $command"
    lxc exec ${CONTAINERNAME} -- su -c "$command"
}

#------------------------------------------------------------------------------------------
execContainer() {
    command="$@"
    #printGreen "Execute command in container: $command"
    lxc exec ${CONTAINERNAME} -- su -l -c \
    "cd $BUILDDIR_MOUNT; export TESTDATA=$AWS_TESTDATA_MOUNT; export JUNIT_REPORT_PATH=${TEST_XML_OUTPUT}; $command" $USERNAME
}

#------------------------------------------------------------------------------------------
build() {
    installNode ${NODE_VERSION}
    execContainer npm config set color ${COLORS}

    printGreen "Building using node $(execContainer node --version) | npm install"
    execContainer npm install
}

#------------------------------------------------------------------------------------------
testLocal() {
    printGreen "Run local tests..."
    execContainer npm config set color ${COLORS}
    execContainer npm run test-jenkins test/local-tests.js
}

#------------------------------------------------------------------------------------------
initEnv() {
    # Verify we have a git repository
    if ! git status > /dev/null 2>&1 ; then
        printRed "Could not find any git repositor in this folder. Please run $(basename $0) in the source directory of a lambda function code."
        exit 1
    fi

    PROJECTNAME=$(basename `git rev-parse --show-toplevel`)

    # Container user
    USERNAME=`id --user --name`
    GROUPNAME=$USERNAME
    USERID=`id --user`
    GROUPID=`id --group`

    # Directories
    BUILDDIR=$(pwd)
    USERDIR=/home/${USERNAME}
    BUILDDIR_MOUNT=${USERDIR}/${PROJECTNAME}
    AWS_SECRETS="/home/${USERNAME}/.aws"
    AWS_TESTDATA="/home/${USERNAME}/.test-data"
    AWS_SECRETS_MOUNT="/home/${USERNAME}/.aws"
    AWS_TESTDATA_MOUNT="/home/${USERNAME}/.test-data"
    TEST_XML_OUTPUT=${BUILDDIR_MOUNT}/test-result.xml

    # Container stufff
    IMAGENAME=nymea-aws-lambda-builder
    CONTAINERNAME=builder-${PROJECTNAME}-${IMAGENAME}

    # Build options
    PRODUCTION=false
    DEPLOY=false
    CHANNEL=development
    NODE_VERSION=v8.11.3

    # Script options
    COLORS=true
    CONFIGDIR=${BUILDDIR}/.lambdabuilder
    CONFIG=${CONFIGDIR}/config

    loadConfiguration
}

#------------------------------------------------------------------------------------------
loadConfiguration() {
    if [ -e ${CONFIG} ]; then
        . ${CONFIG}
    else
        # Save default configuration
        saveConfiguration
    fi
}

#------------------------------------------------------------------------------------------
saveConfiguration() {
    if [ ! -d ${CONFIGDIR} ]; then mkdir ${CONFIGDIR}; fi
    if [ -e ${CONFIG} ]; then rm ${CONFIG}; fi
    touch ${CONFIG}

    echo "# AWS lambda builder configuration for ${PROJECTNAME}" >> ${CONFIG}
    echo "COLORS=${COLORS}" >> ${CONFIG}
    echo "NODE_VERSION=${NODE_VERSION}" >> ${CONFIG}
    echo "AWS_SECRETS=${AWS_SECRETS}" >> ${CONFIG}
    echo "AWS_TESTDATA=${AWS_TESTDATA}" >> ${CONFIG}
}

#------------------------------------------------------------------------------------------
printInfo() {
    echo "Project name: ${PROJECTNAME}"
    echo "- Directories:"
    echo "    Build directory: ${BUILDDIR}"
    echo "    Build mount directory: ${BUILDDIR_MOUNT}"
    echo "    AWS secret directoriy: ${AWS_SECRETS}"
    echo "    AWS secret mount directoriy: ${AWS_SECRETS_MOUNT}"
    echo "    AWS test data directoriy: ${AWS_TESTDATA}"
    echo "    AWS test data mount directoriy: ${AWS_TESTDATA_MOUNT}"

    echo "- User information:"
    echo "    Username: ${USERNAME}"
    echo "    User group: ${GROUPNAME}"
    echo "    User id: ${USERID}"
    echo "    Group id: ${GROUPID}"
    echo "    User directory: ${USERDIR}"

    echo "- Container information:"
    echo "    Image: nymea:${IMAGENAME}"
    echo "    Container: ${CONTAINERNAME}"

    echo "- Configuration:"
    echo "    Config directory: ${CONFIGDIR}"
    echo "    Config file: ${CONFIG}"

    echo "- Build information:"
    echo "    Node version: ${NODE_VERSION}"
    echo "    Production: ${PRODUCTION}"
}


#------------------------------------------------------------------------------------------
# Main
#------------------------------------------------------------------------------------------

initEnv

while [ "$1" != "" ]; do
    case $1 in
        shell )
            enterShell; exit 0;;
        clean )
            runCleanCommand; exit 0;;
        start )
            startContainer; exit 0;;
        stop )
            stopContainer; exit 0;;
        delete )
            deleteContainer; exit 0;;
        info )
            printInfo && exit 0;;
        help )
            usage && exit 0;;
        create-image )
            createBaseImage && exit 0;;
        -t | --test-data )
            AWS_TESTDATA=$2
            shift;;
        -a | --aws-dir )
            AWS_SECRETS=$2
            shift;;
        -n | --node )
            NODE_VERSION=$2
            shift;;
        -p | --production )
            PRODUCTION=true
            shift;;
        -n | --no-colors )
            COLORS=false;;
        -h | --help )
            usage && exit 0;;
        -v | --version )
            echo ${VERSION} && exit 0;;
        * )
            usage && exit 1;;
    esac
    shift
done

# Init configurations
saveConfiguration
loadConfiguration
printInfo


# Create container
createContainer
build
testLocal


