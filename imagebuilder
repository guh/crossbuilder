#!/bin/bash

VERSION=0.1.0

#------------------------------------------------------------------------------------------
function usage() {
  cat <<EOF
Usage: $(basename $0) [OPTIONS] [COMMAND]

This tool should help building images for different plattforms inside an lxd container.
The tool can be run inside the build script directory and requires the name of the build script as parameter.

Copyright © 2018 Simon Stürz <simon.stuerz@guh.io>
Version: ${VERSION}

COMMANDS:
  shell                   Log into shell from builder container
  info                    Print information about the current build environment
  clean                   Run the clean command of the build script
  stop                    Stop the builder container
  start                   Start the builder container
  delete                  Delete the image builder container
  help                    Show this message
  create-image            Create the base image

OPTIONS:
  -s, --script [SCRIPT]   The build script for the image
  -n, --no-colors         Disable colorfull output
  -v, --version           Show the version of the tool
  -h, --help              Show this message

EOF
}

#------------------------------------------------------------------------------------------
# bash colors
BASH_GREEN="\e[1;32m"
BASH_ORANGE="\e[33m"
BASH_RED="\e[1;31m"
BASH_NORMAL="\e[0m"

printGreen() {
    if ${COLORS}; then
        echo -e "${BASH_GREEN}[+] Image builder: $1${BASH_NORMAL}"
    else
        echo -e "[+] Image builder: $1"
    fi
}

printOrange() {
    if ${COLORS}; then
        echo -e "${BASH_ORANGE}[-] Image builder: $1${BASH_NORMAL}"
    else
        echo -e "[-] Image builder: $1"
    fi
}

printRed() {
    if ${COLORS}; then
        echo -e "${BASH_RED}[!] Image builder: $1${BASH_NORMAL}"
    else
        echo -e "[!] Image builder: $1"
    fi
}

#------------------------------------------------------------------------------------------
waitContainerNetwork() {
    printGreen "Wait for container getting online"
    NETWORK_UP=0
    for i in `seq 1 20`; do
        if lxc info ${CONTAINERNAME} | grep -e "eth0.*inet\b" > /dev/null 2>&1 ; then
            NETWORK_UP=1
            printGreen "Container is online"
            break
        fi
        sleep 1
    done

    if [ $NETWORK_UP -ne 1 ] ; then
        printRed "Container is not connected to the Internet."
        exit 1
    fi
}

waitDpkgAvailable() {
    printGreen "Wait for container dpkg getting available..."
    DPKG_AVAILABLE=0

    for i in `seq 1 60`
    do
        #echo "${ERROR_COLOR} /var/lib/dpkg/lock exists... Waiting for it to disappear...${NC}"
        if execContainerRoot test ! -e /var/lib/dpkg/lock; then
            DPKG_AVAILABLE=1
            printGreen "The update manager is available now."
            break
        fi
        sleep 1
    done
    if [ $DPKG_AVAILABLE -ne 1 ] ; then
        #echo "${ERROR_COLOR} /var/lib/dpkg/lock still exists after one minute. Assuming it is stale. Deleting it...${NC}"
        execContainerRoot rm /var/lib/dpkg/lock
    fi
}



#------------------------------------------------------------------------------------------
containerRunning() {
    lxc list | grep ${CONTAINERNAME} | grep RUNNING > /dev/null 2>&1
    return $?
}

#------------------------------------------------------------------------------------------
createContainer() {
    if lxc info ${CONTAINERNAME} > /dev/null 2>&1 ; then
        #printOrange "--> Container ${CONTAINERNAME} already exists."
        startContainer
        return 0
    fi

    # Get the xenial image
    printGreen "Create lxc container ${CONTAINERNAME} out of nymea:${IMAGENAME} image for image building"
    # FIXME: nymea:${IMAGENAME}
    lxc init nymea:${IMAGENAME} ${CONTAINERNAME}

    # Add loop devices
    lxc config device add ${CONTAINERNAME} loop0 unix-block path=/dev/loop0
    lxc config device add ${CONTAINERNAME} loop1 unix-block path=/dev/loop1
    lxc config device add ${CONTAINERNAME} loop2 unix-block path=/dev/loop2
    lxc config device add ${CONTAINERNAME} loop3 unix-block path=/dev/loop3
    lxc config device add ${CONTAINERNAME} loop4 unix-block path=/dev/loop4
    lxc config device add ${CONTAINERNAME} loop5 unix-block path=/dev/loop5
    lxc config device add ${CONTAINERNAME} loop6 unix-block path=/dev/loop6
    lxc config device add ${CONTAINERNAME} loop7 unix-block path=/dev/loop7
    lxc config device add ${CONTAINERNAME} loop-control unix-char path=/dev/loop-control

    # Give permissions to the container
    lxc config set ${CONTAINERNAME} raw.apparmor "mount,"
    lxc config set ${CONTAINERNAME} security.privileged true

    mountBuildDirectory

    startContainer
    waitContainerNetwork
}

#------------------------------------------------------------------------------------------
createBaseImage() {
    printGreen "Create base image for image builder:"

    CONTAINERNAME=${IMAGENAME}-base

    # Check if there is an image
    if lxc image info ${CONTAINERNAME} > /dev/null 2>&1; then
        printRed "There is already an image with the name ${CONTAINERNAME}. Please rename or delete the existing image."
        exit 1
    fi

    # Check if there is a container
    if lxc info ${CONTAINERNAME} > /dev/null 2>&1 ; then
        printRed "--> Container ${CONTAINERNAME} already exists. Please rename or delete the existing container."
        exit 1
    fi

    # Get the bionic image
    printGreen "Create base container ${CONTAINERNAME}"
    lxc init ubuntu:18.04 ${CONTAINERNAME}

    # Add loop devices
    lxc config device add ${CONTAINERNAME} loop0 unix-block path=/dev/loop0
    lxc config device add ${CONTAINERNAME} loop1 unix-block path=/dev/loop1
    lxc config device add ${CONTAINERNAME} loop2 unix-block path=/dev/loop2
    lxc config device add ${CONTAINERNAME} loop3 unix-block path=/dev/loop3
    lxc config device add ${CONTAINERNAME} loop4 unix-block path=/dev/loop4
    lxc config device add ${CONTAINERNAME} loop5 unix-block path=/dev/loop5
    lxc config device add ${CONTAINERNAME} loop6 unix-block path=/dev/loop6
    lxc config device add ${CONTAINERNAME} loop7 unix-block path=/dev/loop7
    lxc config device add ${CONTAINERNAME} loop-control unix-char path=/dev/loop-control

    # Give permissions to the container
    lxc config set ${CONTAINERNAME} raw.apparmor "mount,"
    lxc config set ${CONTAINERNAME} security.privileged true

    startContainer
    waitContainerNetwork
    waitDpkgAvailable

    # Install packages for image building
    execContainerRoot apt update
    execContainerRoot apt -y upgrade
    execContainerRoot apt install -y  debootstrap qemu-utils xz-utils git zip qemu-user-static \
                                  rsync debian-keyring debian-archive-keyring wget whois \
                                  debootstrap f2fs-tools

    # Create bootstraps
    CACHE_DIR=/root/cache

    # Debian stretch
    printGreen "Bootstrap Debian stretch"
    BOOTSTRAP=${CACHE_DIR}/bootstrap/debian-stretch
    BOOTSTRAP_FLAG=${CACHE_DIR}/bootstrap/.debian-stretch
    execContainerRoot mkdir -pv ${BOOTSTRAP}
    execContainerRoot qemu-debootstrap --verbose --arch=armhf stretch $BOOTSTRAP http://http.debian.net/debian
    execContainerRoot touch $BOOTSTRAP_FLAG
    printGreen "Bootstrap debian stretch finished successfully."

    # Ubuntu Xenial 16.04
    printGreen "Bootstrap Ubuntu xenial 16.04"
    BOOTSTRAP=${CACHE_DIR}/bootstrap/ubuntu-xenial
    BOOTSTRAP_FLAG=${CACHE_DIR}/bootstrap/.ubuntu-xenial
    execContainerRoot mkdir -pv ${BOOTSTRAP}
    execContainerRoot qemu-debootstrap --verbose --arch=armhf xenial $BOOTSTRAP http://ports.ubuntu.com/
    execContainerRoot touch $BOOTSTRAP_FLAG
    printGreen "Bootstrap Ubuntu xenial 16.04 finished successfully."

    # Ubuntu Bionic Beaver 18.04
    printGreen "Bootstrap Ubuntu bionic 18.04"
    BOOTSTRAP=${CACHE_DIR}/bootstrap/ubuntu-bionic
    BOOTSTRAP_FLAG=${CACHE_DIR}/bootstrap/.ubuntu-bionic
    execContainerRoot mkdir -pv ${BOOTSTRAP}
    execContainerRoot qemu-debootstrap --verbose --arch=armhf bionic $BOOTSTRAP http://ports.ubuntu.com/
    execContainerRoot touch $BOOTSTRAP_FLAG
    printGreen "Bootstrap Ubuntu bionic 18.04 finished successfully."

    # Clean up container
    execContainerRoot apt -y autoremove
    execContainerRoot apt -y clean

    # Create the image out of this container
    stopContainer
    printGreen "Create image ${IMAGENAME} out of the container ${CONTAINERNAME}"
    lxc publish ${CONTAINERNAME} --alias ${IMAGENAME}
    deleteContainer
    lxc image list | grep ${IMAGENAME}
}


#------------------------------------------------------------------------------------------
deleteContainer() {
    printGreen "Delete container ${CONTAINERNAME}"
    lxc delete ${CONTAINERNAME} --force || true
}

#------------------------------------------------------------------------------------------
startContainer() {
    printGreen "Start container ${CONTAINERNAME}"
    if ! containerRunning; then
        lxc start ${CONTAINERNAME};
    else
        printOrange "--> Container ${CONTAINERNAME} already running"
    fi
}

#------------------------------------------------------------------------------------------
stopContainer() {
    printGreen "Stop container ${CONTAINERNAME}"
    lxc stop ${CONTAINERNAME} --force || true
}

#------------------------------------------------------------------------------------------
mountBuildDirectory() {
    printGreen "Mount build directory ${BUILDDIR} into container ${CONTAINERNAME} ${BUILDDIR_MOUNT}"
    lxc config device add ${CONTAINERNAME} $(basename ${BUILDDIR}) disk source=${BUILDDIR} path=${BUILDDIR_MOUNT}
}

#------------------------------------------------------------------------------------------
buildImage() {
    if ${COLORS}; then
        lxc exec ${CONTAINERNAME} -- su -c "cd ${BUILDDIR_MOUNT} && ./${BUILDSCRIPT}"
    else
        lxc exec ${CONTAINERNAME} -- su -c "cd ${BUILDDIR_MOUNT} && ./${BUILDSCRIPT} -n"
    fi
}

#------------------------------------------------------------------------------------------
enterShell() {
    printGreen "Enter shell in container ${CONTAINERNAME}"
    lxc exec ${CONTAINERNAME} bash
}

#------------------------------------------------------------------------------------------
runCleanCommand() {
    printGreen "Run clean command in container: ${BUILDSCRIPT} --clean"
    execContainer ./${BUILDSCRIPT} --clean
}

#------------------------------------------------------------------------------------------
execContainer() {
    command="$@"
    #printGreen "Execute command in container: $command"
    lxc exec ${CONTAINERNAME} -- su -c "cd ${BUILDDIR_MOUNT}; $command"
}

#------------------------------------------------------------------------------------------
execContainerRoot() {
    command="$@"
    #printGreen "Execute command in container: $command"
    lxc exec ${CONTAINERNAME} -- su -c "$command"
}

#------------------------------------------------------------------------------------------
loadConfiguration() {
    if [ -e ${CONFIG} ]; then
        . ${CONFIG}
    else
        # Save default configuration
        saveConfiguration
    fi
}

#------------------------------------------------------------------------------------------
saveConfiguration() {
    if [ ! -d ${CONFIGDIR} ]; then mkdir ${CONFIGDIR}; fi
    if [ -e ${CONFIG} ]; then rm ${CONFIG}; fi
    touch ${CONFIG}

    echo "# nymea image builder configuration" >> ${CONFIG}
    echo "COLORS=${COLORS}" >> ${CONFIG}
    echo "BUILDSCRIPT=${BUILDSCRIPT}" >> ${CONFIG}
}

#------------------------------------------------------------------------------------------
initEnv() {
    # Directories
    BUILDDIR=$(pwd)
    BUILDDIR_MOUNT=/root/$(basename ${BUILDDIR})

    # Script options
    COLORS=true
    CONFIGDIR=${BUILDDIR}/.imagebuilder
    CONFIG=${CONFIGDIR}/config
}

#------------------------------------------------------------------------------------------
printInfo() {
    echo "Project name: ${PROJECTNAME}"
    echo "Build script for image: ${BUILDSCRIPT}"
    echo "- Directories:"
    echo "    Build directory: ${BUILDDIR}"
    echo "    Build mount directory: ${BUILDDIR_MOUNT}"

    echo "- Container information:"
    echo "    Image: nymea:${IMAGENAME}"
    echo "    Container: ${CONTAINERNAME}"

    echo "- Configuration:"
    echo "    Config directory: ${CONFIGDIR}"
    echo "    Config file: ${CONFIG}"
}



#------------------------------------------------------------------------------------------
# Main
#------------------------------------------------------------------------------------------

COMMAND=""

initEnv
loadConfiguration

# Parse command
while [ "$1" != "" ]; do
    case $1 in
        shell )
            COMMAND="enterShell";;
        clean )
            COMMAND="runCleanCommand";;
        start )
            COMMAND="startContainer";;
        stop )
            COMMAND="stopContainer";;
        delete )
            COMMAND="deleteContainer";;
        info )
            COMMAND="printInfo";;
        create-image )
            COMMAND="create-image";;
        help )
            usage && exit 0;;
        -s | --script )
            BUILDSCRIPT=$2
            shift;;
        -n | --no-colors )
            COLORS=false;;
        -h | --help )
            usage && exit 0;;
        -v | --version )
            echo ${VERSION} && exit 0;;
        * )
            usage && exit 1;;
    esac
    shift
done

# Note: we don't need any build script for creating the base image
if [ "${COMMAND}" == "create-image" ]; then createBaseImage; exit 0; fi

# Check if build script is specified
if [ -z "${BUILDSCRIPT}" ]; then
    printRed "No build script specified. Please specify the build script using the \"-s\" or \"--script\" parameter."
    exit 1
fi

# Check if the build script exists
if [ ! -f ${BUILDDIR}/${BUILDSCRIPT} ]; then
    printRed "Could not find ${BUILDDIR}/${BUILDSCRIPT}. Please specify the build script using the \"-s\" or \"--script\" parameter."
    exit 1
fi

saveConfiguration

# Init
PROJECTNAME=$(basename ${BUILDSCRIPT})
IMAGENAME=nymea-image-builder
CONTAINERNAME=builder-${PROJECTNAME}-${IMAGENAME}

# Execut command
if [ "${COMMAND}" == "enterShell" ]; then createContainer && enterShell; exit 0; fi
if [ "${COMMAND}" == "runCleanCommand" ]; then runCleanCommand; exit 0; fi
if [ "${COMMAND}" == "startContainer" ]; then startContainer; exit 0; fi
if [ "${COMMAND}" == "stopContainer" ]; then stopContainer; exit 0; fi
if [ "${COMMAND}" == "deleteContainer" ]; then deleteContainer; exit 0; fi
if [ "${COMMAND}" == "printInfo" ]; then printInfo; exit 0; fi

# Default build the container
printInfo
createContainer
buildImage

